---
title: "Study Guide and Practice Problems for PSTAT 10 Midterm"
author: "Daniel Silva"
date: "2024-07-12"
format: html
---

# Study Guide

## 1. Vectors and Operations

### Definition and Creation of Vectors
Vectors are the most fundamental data structure in R. They are atomic, meaning they can contain only one type of data: numeric, character, or logical.

#### Examples:
- Creating a vector using the `c()` function:
    ```{r}
    vec <- c(1, 2, 3, 4, 5)
    ```

### Vector Operations
Vectors can be used in arithmetic operations and comparisons. These operations are applied element-wise.

#### Examples:
- Arithmetic Operations:
    ```{r}
    x <- c(1, 2, 3)
    y <- c(4, 5, 6)
    z <- x + y  # z is c(5, 7, 9)
    ```
- Comparisons:
    ```{r}
    x > 2  # returns c(FALSE, FALSE, TRUE)
    ```

### Vector Recycling
When performing operations on vectors of different lengths, R recycles the shorter vector to match the length of the longer vector.

#### Examples:
- Recycling:
    ```{r}
    x <- c(1, 2, 3)
    y <- c(4, 5)
    z <- x + y  # z is c(5, 7, 7) because y is recycled to c(4, 5, 4)
    ```

## 2. Control Flow

### Branching: if, else, ifelse
Branching allows you to execute different code based on conditions.

#### Examples:
- Using `if`, `else if`, `else`:
    ```{r}
    x <- 10
    if (x > 5) {
        print("x is greater than 5")
    } else {
        print("x is not greater than 5")
    }
    ```

### Loops: for, while
Loops allow you to repeat a block of code multiple times.

#### Examples:
- For loop:
    ```{r}
    for (i in 1:5) {
        print(i)
    }
    ```

- While loop:
    ```{r}
    i <- 1
    while (i <= 5) {
        print(i)
        i <- i + 1
    }
    ```

## 3. Functions

### Definition and Usage
Functions are blocks of code that perform a specific task. They take inputs (arguments) and return an output.

#### Examples:
- Defining and using a function:
    ```{r}
    add <- function(a, b) {
        return(a + b)
    }
    result <- add(2, 3)  # result is 5
    ```

### Vectorized Functions
Vectorized functions operate on entire vectors at once, without the need for explicit loops.

#### Examples:
- Using `sapply` for applying a function over a vector:
    ```{r}
    noise <- function(animal) {
        if (animal == "cow") {
            return("moo")
        } else if (animal == "pig") {
            return("oink")
        } else {
            return("unknown")
        }
    }
    sapply(c("cow", "pig", "dog"), noise)  # returns c("moo", "oink", "unknown")
    ```

## 4. Probability and Simulation

### Random Variables
A random variable is a numerical outcome of a random experiment.

#### Examples:
- Simulating the roll of a die:
    ```{r}
    roll <- sample(1:6, size=1)
    ```

### Probability Distributions
R has built-in functions for various probability distributions.

#### Examples:
- Generating random numbers from a uniform distribution:
    ```{r}
    runif(5, min=0, max=10)
    ```

- Calculating the probability density of a normal distribution:
    ```{r}
    dnorm(0, mean=0, sd=1)
    ```

## 5. Tibbles, Pipes, and dplyr

### Tibbles
Tibbles are a modern take on data frames, provided by the `tibble` package in the tidyverse. They are more user-friendly and less error-prone compared to traditional data frames.

#### Examples:
- Creating a tibble:
    ```{r}
    library(tibble)
    tibble_example <- tibble(
      x = 1:5,
      y = letters[1:5]
    )
    ```

### Pipes
The pipe (`%>%`) is a powerful tool in the tidyverse that allows for the chaining of multiple operations in a readable manner.

#### Examples:
- Using the pipe to transform data:
    ```{r}
    library(dplyr)
    tibble_example %>%
      mutate(z = x * 2) %>%
      filter(z > 5)
    ```

### dplyr Functions
The `dplyr` package provides a set of functions for data manipulation that are both fast and easy to use.

#### Examples:
- `select()`: Select columns from a data frame.
    ```{r}
    tibble_example %>%
      select(x, y)
    ```
- `filter()`: Filter rows based on a condition.
    ```{r}
    tibble_example %>%
      filter(x > 2)
    ```
- `mutate()`: Create or transform columns.
    ```{r}
    tibble_example %>%
      mutate(z = x * 2)
    ```
- `summarize()`: Summarize multiple values to a single value.
    ```{r}
    tibble_example %>%
      summarize(mean_x = mean(x))
    ```
- `group_by()`: Group data by one or more variables.
    ```{r}
    tibble_example %>%
      group_by(y) %>%
      summarize(mean_x = mean(x))
    ```

# Practice Problems

## Multiple Choice

1. Which function in R can be used to generate a sequence of numbers from 5 to 15 with an increment of 2?
    A. seq(5, 15, 2)
    B. create_sequence(5, 15, 2)
    C. numbers(5, 15, 2)
    D. generate(5, 15, 2)
    E. sequence(5, 15, 2)

    **Answer:** A. seq(5, 15, 2)

2. What is the output of the following R code?
    ```{r}
    vec <- c(3, 6, 9, 12)
    vec[vec %% 3 == 0]
    ```
    A. 6 9
    B. 3 6 9 12
    C. 3 9
    D. 6 12
    E. NULL

    **Answer:** B. 3 6 9 12

3. Which function is used to combine multiple vectors into a matrix in R?
    A. rbind()
    B. cbind()
    C. merge()
    D. matrix()
    E. bind_cols()

    **Answer:** B. cbind()

4. What does the function `summary()` do when applied to a numeric vector in R?
    A. Prints the structure of the vector.
    B. Summarizes the vector by computing mean and median.
    C. Combines multiple vectors into one.
    D. Provides a statistical summary of the vector.
    E. Plots the data in the vector.

    **Answer:** D. Provides a statistical summary of the vector.

5. In R, what is the result of `rep(1:4, times = 2)`?
    A. 1 2 3 4 1 2 3 4
    B. 1 1 2 2 3 3 4 4
    C. 1 2 1 2 1 2 1 2
    D. 4 3 2 1 4 3 2 1
    E. NULL

    **Answer:** A. 1 2 3 4 1 2 3 4

6. Which function from the dplyr package would you use to add a new column to a tibble?
    A. select()
    B. filter()
    C. mutate()
    D. arrange()
    E. summarize()

    **Answer:** C. mutate()

7. What is the primary use of the pipe (`%>%`) in the tidyverse?
    A. To combine multiple data frames.
    B. To assign values to variables.
    C. To chain multiple operations together.
    D. To create plots.
    E. To perform statistical tests.

    **Answer:** C. To chain multiple operations together.

8. How would you filter rows in a tibble where the column `x` is greater than 10 using dplyr?
    A. `tibble_example %>% mutate(x > 10)`
    B. `tibble_example %>% select(x > 10)`
    C. `tibble_example %>% filter(x > 10)`
    D. `tibble_example %>% arrange(x > 10)`
    E. `tibble_example %>% summarize(x > 10)`

    **Answer:** C. `tibble_example %>% filter(x > 10)`

## Fill-in-the-Blank

9. The function `paste` in R is used to ___________.

    **Answer:** concatenate strings

10. In base R, the function to create a line plot is ___________.

    **Answer:** plot

11. To select rows in a dataframe in dplyr based on a condition, you use the function ___________.

    **Answer:** filter

12. The `group_by` function in the tidyverse is used to ___________.

    **Answer:** group data by one or more variables for summary operations

13. The function to calculate the variance of a vector in R is ___________.

    **Answer:** var

## Free-Response Coding

14. Write a function `remove_negatives` that removes all negative values from a vector.

    ```{r}
    remove_negatives <- function(vec) {
        vec <- vec[vec >= 0]
        return(vec)
    }
    ```

15. Write a function `print_diamond` that prints a diamond shape of asterisks with a given maximum width.

    ```{r}
    print_diamond <- function(max_width) {
        for (i in 1:max_width) {
            cat(rep(" ", max_width - i), rep("*", 2*i - 1), "\n")
        }
        for (i in (max_width-1):1) {
            cat(rep(" ", max_width - i), rep("*", 2*i - 1), "\n")
        }
    }
    ```

16. Write a function `find_min_index` that finds the index of the minimum value in a vector.

    ```{r}
    find_min_index <- function(vec) {
        min_index <- which.min(vec)
        return(min_index)
    }
    ```

17. Write a function `calculate_surface_area` that calculates the surface area of a rectangular prism given its length, width, and height.

    ```{r}
    calculate_surface_area <- function(length, width, height) {
        surface_area <- 2 * (length * width + width * height + height * length)
        return(surface_area)
    }
    ```

18. Simulate rolling three fair 6-sided dice 10,000 times and calculate the proportion of times the sum is exactly 15.

    ```{r}
    set.seed(123)
    n <- 10000
    results <- replicate(n, sum(sample(1:6, 3, replace = TRUE)))
    proportion <- mean(results == 15)
    proportion
    ```

# Solutions to Practice Problems

1. **Multiple Choice:**
    The correct answer is A. seq(5, 15, 2).

2. **Multiple Choice:**
    The correct answer is B. 3 6 9 12.

3. **Multiple Choice:**
    The correct answer is B. cbind().

4. **Multiple Choice:**
    The correct answer is D. Provides a statistical summary of the vector.

5. **Multiple Choice:**
    The correct answer is A. 1 2 3 4 1 2 3 4.

6. **Multiple Choice:**
    The correct answer is C. mutate()

7. **Multiple Choice:**
    The correct answer is C. To chain multiple operations together.

8. **Multiple Choice:**
    The correct answer is C. `tibble_example %>% filter(x > 10)`

9. **Fill-in-the-Blank:**
    The function `paste` in R is used to concatenate strings.

10. **Fill-in-the-Blank:**
    In base R, the function to create a line plot is `plot`.

11. **Fill-in-the-Blank:**
    To select rows in a dataframe in dplyr based on a condition, you use the function `filter`.

12. **Fill-in-the-Blank:**
    The `group_by` function in the tidyverse is used to group data by one or more variables for summary operations.

13. **Fill-in-the-Blank:**
    The function to calculate the variance of a vector in R is `var`.

14. **Free-Response Coding:**
    - `remove_negatives` function:
        ```{r}
        remove_negatives <- function(vec) {
            vec <- vec[vec >= 0]
            return(vec)
        }
        ```

15. **Free-Response Coding:**
    - `print_diamond` function:
        ```{r}
        print_diamond <- function(max_width) {
            for (i in 1:max_width) {
                cat(rep(" ", max_width - i), rep("*", 2*i - 1), "\n")
            }
            for (i in (max_width-1):1) {
                cat(rep(" ", max_width - i), rep("*", 2*i - 1), "\n")
            }
        }
        ```

16. **Free-Response Coding:**
    - `find_min_index` function:
        ```{r}
        find_min_index <- function(vec) {
            min_index <- which.min(vec)
            return(min_index)
        }
        ```

17. **Free-Response Coding:**
    - `calculate_surface_area` function:
        ```{r}
        calculate_surface_area <- function(length, width, height) {
            surface_area <- 2 * (length * width + width * height + height * length)
            return(surface_area)
        }
        ```

18. **Free-Response Coding:**
    - Simulating a dice roll:
        ```{r}
        set.seed(123)
        n <- 10000
        results <- replicate(n, sum(sample(1:6, 3, replace = TRUE)))
        proportion <- mean(results == 15)
        proportion
        ```

This study guide and practice problem set should help you review and practice the key concepts covered in your lectures.
